---
# tasks file for account

- assert:
    that:
    - pmsversion is defined
    - accountbakdir is defined

- include: init.mysql.yml

- file:
    path: "{{item}}"
    state: directory
  with_items:
  - "{{basedir}}"
  - "{{accountbakdir}}"

- name: get currVersion
  args:
    executable: /bin/bash
    chdir: "{{basedir}}"
  shell: |
    ff=$(ls pms-*-database.tar.gz)
    if [ -n $ff ]; then
      currVersion=$(echo $ff | cut -d - -f 2,3 | tail -n 1)
    else
      currVersion="null"
    fi
    echo $currVersion
  register: getCurrVersion

- set_fact: currVersion={{getCurrVersion.stdout}}

- service:
    name: pms_server
    state: stopped
  delegate_to: "pms0{{ansible_fqdn.split('0')[1]}}"
  ignore_errors: yes
  register: pms_service
  when: currVersion != "null" and currVersion != version

- name: backup
  when: currVersion != "null" and currVersion != version
  args:
    executable: /bin/bash
    chdir: "{{basedir}}"
  shell: |
    PATH=/opt/mysql/server-5.6/bin/:$PATH
    bakfile={{accountbakdir}}/bak.$(date +%Y%m%d).account.sql.gz
    mysqldump -u{{accountmaster.user}} -p{{accountmaster.pass}} -h{{accountmaster.host}} accountmaster 2>/dev/null | gzip > $bakfile 2>/dev/null

- name: download & extract
  args:
    executable: /bin/bash
    chdir: "{{basedir}}"
  shell: |
    rm pms-*-database.tar.gz
    wget {{pkgurl}}
    if [ ! -f {{pkgname}} ]; then 
      echo downloadpackage failed >&2
      exit 1
    else
      tar -zxf {{pkgname}}
      echo download and extract ok
      exit 0
    fi

- name: create database
  args:
    executable: /bin/bash
    chdir: "{{basedir}}"
  shell: |
    PATH=/opt/mysql/server-5.6/bin/:$PATH
    tar -zxf {{pkgname}}
    cd database
    ./refresh_db.sh -u {{accountmaster.user}} -p '{{accountmaster.pass}}' -h '{{accountmaster.host}}' accountmaster 
  when: currVersion == "null"

- name: update database
  when: currVersion != "null" and currVersion != version
  args:
    executable: /bin/bash
    chdir: "{{basedir}}"
  shell: |
    PATH=/opt/mysql/server-5.6/bin/:$PATH

    ## function for execute sql script
    function runsql(){
      sqlfile=$1
      cat $sqlfile | mysql -u{{accountmaster.user}} -p{{accountmaster.pass}} -h{{accountmaster.host}} accountmaster >../../${sqlfile}.out  2>&1
      if [ $? -ne 0 ];then
        echo execute $sqlfile failed >&2
        exit 1
      else
        rm -f $sqlfile
      fi
    }
    ## update sql
    cd database/upgrade
    cv1=$(echo {{currVersion.split('-')[0]}} | cut -d . -f 1)
    cv2=$(echo {{currVersion.split('-')[0]}} | cut -d . -f 2)
    cv3=$(echo {{currVersion.split('-')[0]}} | cut -d . -f 3)
    filelist=$(ls | sort -n -t . -k 1,1 -k 2,2)
    for file in $filelist; do
      v1=$(echo $file | cut -d . -f 1)
      v2=$(echo $file | cut -d . -f 2)
      v3=$(echo $file | cut -d . -f 3)
      if [[ $v1 =~ ^[0-9]*$ ]] && [[ $v2 =~ ^[0-9]*$ ]] && [[ $v3 =~ ^[0-9]*$ ]]; then
        if [ $v1 -eq $cv1 ] && [ $v2 -eq $cv2 ] && [ $v3 -gt $cv3 ]; then
          runsql $file
        fi
        if [ $v1 -eq $cv1 ] && [ $v2 -gt $cv2 ]; then
          runsql $file
        fi
        if [ $v1 -gt $cv1 ]; then
          runsql $file
        fi
      fi
    done


- service:
    name: pms_server
    state: started
  delegate_to: "pms0{{ansible_fqdn.split('0')[1]}}"
  ignore_errors: yes
  when: pms_service | changed